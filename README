# MY_SERVICE_MODULE

A fully modular and professional Infrastructure-as-Code (IaC) project using **Terraform** to provision complete cloud environment in **AWS**.

## Project Overview 🌐

This project sets up a complete and scalable infrastructure in AWS using Terraform. It includes:

- **Custom VPC** with public and private subnets  
- **Internet Gateway** and **NAT Gateway**  
- **Elastic Load Balancer (ELB)**  
- **EC2 Instances** with key pair authentication  
- **Auto Scaling Groups**  
- **EBS Volume attached to instances**  
- **RDS (MariaDB)**  
- **CloudWatch** alarms for autoscaling  
- **IAM Roles and S3 Bucket** (optional)

Everything is structured into reusable **Terraform modules** and environment-specific configurations.

## Project Structure 📁

```bash
MY_SERVICE_MODULE/
│
├── modules/                   # Reusable modules
│   ├── vpc/                   # VPC resources
│   ├── instances/             # EC2 instance logic
│   ├── elb/                   # Load balancer resources
│   ├── rds/                   # Database module
│   ├── security_groups/       # SG for all resources
│   ├── volumes/               # EBS & IAM roles
│   ├── autoscaling/           # ASG + Launch Templates
│   ├── cloudwatch/            # Scaling alarms
│   └── routable/              # Route tables (Public + Private)
│
├── environments/
│   ├── development/           # Dev environment config
│   │   ├── main.tf
│   │   ├── terraform.tfvars
│   │   └── variables.tf
│   └── production/            # Prod config (planned)
│
└── shared/
    └── provider.tf            # Shared provider configuration

```

## How to Use 🚀

### 1. Clone the repository:
```bash
git clone https://github.com/Eliya-shlomo/MY_SERVICE_MODULE.git
cd MY_SERVICE_MODULE/environments/development
```

### 2. Customize `terraform.tfvars`
```hcl
aws_access_key  = "YOUR_ACCESS_KEY"
aws_secret_key  = "YOUR_SECRET_KEY"
bucket_name     = "your-unique-s3-bucket-name"
create_bucket   = true
# other values...
```

> 📌 Do NOT upload your access/secret keys to GitHub. Use `.gitignore` to ignore `terraform.tfvars`.

### 3. Initialize Terraform
```bash
terraform init
```

### 4. Plan the deployment
```bash
terraform plan
```

### 5. Apply infrastructure
```bash
terraform apply
```

## GitHub Tips 🧠
Make sure you’ve:
- `.gitignore`d sensitive files (`*.tfstate`, `terraform.tfvars`, etc.)
- Structured each resource as a module
- Included outputs in each module for reuse
- Used inputs in `main.tf` to call modules properly

## Author ✍️
Created by **Eliya Shlomo**, with deep focus on DevOps best practices.

## License 📄
This project is open-sourced under the MIT license.
